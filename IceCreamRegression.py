# -*- coding: utf-8 -*-
"""
Created on Sat Dec 14 20:39:34 2024

@author: Jonathan Gonzalez

Machine Learning Regression Masterclass in Python 
By: Dr. Ryan Ahmed 
Platform: Udemy
Type: Compilation of videos

Program that creates a linear regression of a ice cream stand using the money generated by the stand 
as the dependent variable and the temperature as the independent variable.The linear regression is 
created using Pandas, Scikit Learn and Keras.

Last Updated: 12/14/2024
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

IceCreamData = pd.read_csv("IceCreamData.csv")  # Reads comma-separated value files

print("First five values:\n")

print(IceCreamData.head(5)) # Shows you the first 5 data points.

print("\n")

print(112*"*")

print("\nFirst ten values:")

print(f"\n {IceCreamData.head(10)}\n") # Shows you the first ten values.

print(112*"*")

print("\nLast five values:\n")

print(IceCreamData.tail(5)) # Shows the last five values of the file.

print("\n")

print(112*"*")

print("\nLast ten values:\n")

print(IceCreamData.tail(10)) # Shows the last ten values of the file.

print("\n")

print(112*"*")

print("\nAll values:\n")

print(IceCreamData) # Shows all the values.

print("\n")

print(112*"*")

print("\nData Analysis of Data Points:\n")

# It tells you the count, mean, standard deviation, minimum value, maximum value, the 25th percentile\
# The 50th percentile and the 75th percentile

print(IceCreamData.describe())  

# It shows you information about the data such as the type and if there any nulls 

print("\n")

print(112*"*")

print("\nInformation About Data Points:\n")

print(IceCreamData.info())

plt.close('all')

# Is used to plot the data

sns.jointplot( x = 'Temperature', y = 'Revenue', data = IceCreamData, color = 'gray')

# Plotting the same data but changing the axis

sns.jointplot(x = 'Revenue', y = 'Temperature', data = IceCreamData, color = 'gray')

# Shows us plots of the data as well as their distribution

sns.pairplot(IceCreamData)

# Creates trendline
sns.lmplot(x='Temperature',y='Revenue', data = IceCreamData)

sns.lmplot(x='Revenue',y='Temperature', data = IceCreamData)

# x must be given as a DataFrame object instead of a Series object
# That is the reason it uses the double brackets
x = IceCreamData[['Temperature']]

y = IceCreamData['Revenue']

from sklearn.model_selection import train_test_split

# Creates the training sets and the testing sets
# In this case the training set is 77% of the data and the testing set is 33% of the data
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.33, random_state=42)

# If we want the training set to be 80% and the testing set to be 20% we use the following code
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Fit intercept shows us where it inrsects the y-axis
regressor = LinearRegression(fit_intercept = True)

# Regressor.fit trains the model
regressor.fit(x_train,y_train)

# Slope is obtained the following way
m = regressor.coef_

# Intercept of the slope
b = regressor.intercept_

# it forces the intercept to pass through the origin
#regressor = LinearRegression(fit_intercept = False)

# Regressor.fit trains the model
#regressor.fit(x_train,y_train)

# Slope is obtained the following way
#m = regressor.coef_

# Intercept of the slope
#b = regressor.intercept_

# The predicted revenue of the model 
y_predict = regressor.predict(x_test)


plt.figure()
plt.scatter(x_train,y_train, color = 'gray')
plt.plot(x_train,regressor.predict(x_train), color = 'red')
plt.ylabel('Revenue [Dollars]')
plt.xlabel('Temperature [DegC]')
plt.title('Revenue Generated VS. Temperature @ Ice Cream (Training Set)')

plt.figure()
plt.scatter(x_test,y_test, color = 'blue')
plt.plot(x_test,y_predict, color = 'red')
plt.ylabel('Revenue [Dollars]')
plt.xlabel('Temperature [DegC]')
plt.title('Revenue Generated VS. Temperature @ Ice Cream (Testing Set)')

#Testing Random Values

T1 = [[40]]
T2 = [[10]]
T3 = [[25.6]]

Rev1 = regressor.predict(T1)
Rev2 = regressor.predict(T2)
Rev3 = regressor.predict(T3)

R2 = 1- np.sum((y_test-y_predict)**2)/np.sum((y_test-np.mean(y_test))**2)